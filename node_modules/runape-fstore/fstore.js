var fs = require("fs");
var fileName = "fstore.json";
var simpleCrypto = {
	encrypt: function (text) { return text; },
	decrypt: function (text) { return text; }
};
var isCasper = typeof (casper) == "object";

var writeOp = !!isCasper ? "write" : "writeFileSync";
var readOp = !!isCasper ? "read" : "readFileSync";
var existsOp = !!isCasper ? "exists" : "existsSync";

exports.initCrypto = function (secretKey) {
	if (!secretKey || !secretKey.trim())
		throw "secretKey must not be empty";

	if (!!isCasper) {
		var SimpleCrypto = require("simple-crypto-js").default;
		simpleCrypto = new SimpleCrypto(secretKey)
	} else {
		var crypto = require("crypto");
		var hashKey = crypto.createHash('sha256').update(String(secretKey)).digest('base64').substr(0, 32);
        simpleCrypto.encrypt = function (obj) {
			var iv = crypto.randomBytes(16);
			var cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(hashKey), iv);
			var encrypted = cipher.update(JSON.stringify(obj));
			encrypted = Buffer.concat([encrypted, cipher.final()]);
			return iv.toString('hex') + ':' + encrypted.toString('hex');
		}

		simpleCrypto.decrypt = function (text) {
			var textParts = text.toString().split(':');
			var iv = Buffer.from(textParts.shift(), 'hex');
			var encryptedText = Buffer.from(textParts.join(':'), 'hex');
			var decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(hashKey), iv);
			var decrypted = decipher.update(encryptedText);
			decrypted = Buffer.concat([decrypted, decipher.final()]);
			return decrypted.toString();
		}
	}
}

exports.setFileName = function (path) {
	if (!path || !path.trim())
		throw "File name must not be empty";

	fileName = path.trim();
}

exports.set = function (object) {
	if (typeof (object) !== "object")
		throw "set expects an object";

	var data = simpleCrypto.encrypt(object);
	fs[writeOp](fileName, data);
};

exports.get = function () {
	var content = {};
	if (fs[existsOp](fileName)) {
		content = simpleCrypto.decrypt(fs[readOp](fileName));
	}

	return content;
};